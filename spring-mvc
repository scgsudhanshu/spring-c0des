spring MVC : 
to create web applicaitons using Spring 

1. follows Model , View , Controller Design pattern 
2. Built on top of Servlet API
3. Implements features of Spring core like dependency Injection  , IOC 

use case : 
1. separate Model, view and controller 
2. Powerful configuration
3. features of Spring core framework 
4. Facilitates Rapid Application Development
5. Flexibility 

MVC Design Pattern : 

Model : Data 
View : Presentation of the data
Controller : Interface between model and view 

Working of Spring MVC : 

1. Client send the request to server 
2. Request first gies to the dispatcher servlet 
3. Dispatcher servlet send the request to the Controller 
4. Controller can access the other components such as DAO and Services Layer 
5. Controller sends the data back to the Dispatcher Servlet in the form of Model and the name of rendering servlet 
6. Dispatcher servlet then sends the data to the View Resolver 
7. View Resolver then send the requested view to the Front Controller or Dispatcher Servlet 
8. Then dispacher servlet send the response to the client

Steps for creation of Web MVC project : 
1. Configure the dispatcher servlet in the web.xml - configuration - added tags for <servlet-name>
2. Create Spring Configuration file - configuration - create an xml file with name spring-servlet.xml and config it like config.xml in spring core
3. Configure view resolver - configuration -  a bean in configuration file of spring-servlet.xml - 2 props : prefix and suffix
4. Create controller - code -  a java class - using @Controller annotation and use of @RequestMapping("/home") to execute the function on the firing of the /home url
5. Create view pages - code - 

Naming convention for the config file of spring : spring(name of the dispatcher servlet)-(mandatory to use hyphen) name

Sending data from controller to view 

1. Using Model : by using addAttribute(String key , Object value) and fetch it by using request.getAttribute("{key}")
2. Using Model and View : by using addObject(String key , Object value)

use of @RequestMapping with class then we have to specify the url of the class first then the method 

like : 
@RequestMapping("/ABC")
class ABC
{
	@RequestMapping("/method")
	public void method
}

url should be : /ABC/method

from view to controller , data comes in the form of methods 

@Service : To mark the function as a service 

@Repository : to mark the funciton as a Dao 

Redirecting in spring :

1. Using HttpServletResponse
2. Redirect Prefix
3. RedirectView

Using inner class 

for the inner class use object.field_name in the name field of the form control

Serving static file resources in Spring MVC 

File uploading in Spring MVC : 

using multipart resolver 
1. use dependency commons io and comons file upload
2. Add enctype="multipart/form-data"
3. Add CommonsMultipartFile in the argument of handler  


PathVariable Annotation : Mostly used during creation of Rest APIs
to bind method attribute to URI template variables
URI template example : 
@RequestMapping("/book/{id}")
void book(@PathVariable("id") int id)

Exception Handling in Spring MVC :
 
use @ExceptionHandler(value = Exception.class) for general exception handling 
otherwise 
use @ExceptionHandler(NullPointerException.class) for null pointer exception and other exceptions

Above Exception Handling is for one handler only

@ControllerAdvice : for making a class as exception handler 
@ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) for sending the code

spring Interceptor : Used to perform an action before handler hanlding the request , after handling the request and after rendering the view
by implementing the Interface Handler Interceptor

Three Methods : preHandler , postHandle , afterCompletion

preHandler : Used to stop the request before the handling by the handler if it return true then execution by the handler takes place otherwise no execution takes place by the handler 

postHandle : After handling by the handler 

afterCompletion : After view displaying

AOP : It increases modularity by separation of main code and cross cutting concerns 
2. Allows us to appliy external service in our main service without modifying the code e.g. Agar hme apni service se phle ya baad me kcuhh chalana h to use code ko Aspect bolte h 
3. Cross cutting concern : External service 
4. Complememnts OOPS 

Aspect : Modularization of a concern that cuts across multiple classes basically the set of code that executes 

Join Point : Any code execution point : in spring it is method execution 

Advice : Action that performed by the aspect on the join point 

Point Cut : Expression for matching of join points 

Types of Advices : After , Before , After-Returning : Method returning successfully , After-throwing : After throwing error 

use pattern in @Before and @After : 

like @Before("execution(*(it is for all types of return type) (packeage name and class name and function (* for all methods )(..)(two dots are used for args)))")

@Transactional is used only with public classes , it creates the proxy bean and then implements , it is a level of abstraction and not shown to the public 

 

  
